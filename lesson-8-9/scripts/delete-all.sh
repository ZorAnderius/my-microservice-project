#!/bin/bash

set -euo pipefail

echo "[1/6] –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –æ—á–∏—â–µ–Ω–Ω—è —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏"

PROJECT_ROOT=$(git rev-parse --show-toplevel)
TERRAFORM_DIR="$PROJECT_ROOT/lesson-8-9/terraform"
S3_BACKEND_DIR="$PROJECT_ROOT/lesson-8-9/terraform/modules/s3-backend"

export VPC_ID=$(terraform -chdir="$TERRAFORM_DIR" output -raw vpc_id 2>/dev/null || echo "")
export AWS_REGION=$(terraform -chdir="$TERRAFORM_DIR" output -raw aws_region 2>/dev/null || echo "")

if [[ -z "$VPC_ID" || -z "$AWS_REGION" ]]; then
  echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ VPC ID –∞–±–æ —Ä–µ–≥—ñ–æ–Ω –∑ Terraform output."
  exit 1
fi

clean_helm_apps() {
  echo "–û—á–∏—â–µ–Ω–Ω—è Helm-—Ä–µ–ª—ñ–∑—ñ–≤ Jenkins —Ç–∞ ArgoCD"

  if ! command -v helm >/dev/null 2>&1; then
    echo "helm –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ Helm cleanup"
    return
  fi

  if helm list -A | grep -q jenkins; then
    echo "–í–∏–¥–∞–ª–µ–Ω–Ω—è Helm-—Ä–µ–ª—ñ–∑—É: jenkins"
    helm uninstall jenkins -n jenkins || true
  fi

  if helm list -A | grep -q argocd; then
    echo "–í–∏–¥–∞–ª–µ–Ω–Ω—è Helm-—Ä–µ–ª—ñ–∑—É: argocd"
    helm uninstall argocd -n argocd || true
  fi
}

clean_kubernetes_namespaces() {
  echo "–í–∏–¥–∞–ª–µ–Ω–Ω—è namespace-—ñ–≤ Jenkins —Ç–∞ ArgoCD"

  if ! command -v kubectl >/dev/null 2>&1; then
    echo "kubectl –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ cleanup namespaces"
    return
  fi

  for ns in jenkins argocd; do
    if kubectl get ns "$ns" &>/dev/null; then
      kubectl delete ns "$ns" --wait=false || true
    fi
  done
}

clean_argocd_crds() {
  echo "–í–∏–¥–∞–ª–µ–Ω–Ω—è CRD ArgoCD (—è–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å)"

  if ! command -v kubectl >/dev/null 2>&1; then
    return
  fi

  kubectl get crd | grep 'argoproj.io' | awk '{print $1}' | while read -r crd; do
    kubectl delete crd "$crd" || true
  done
}


clean_load_balancers() {
  echo "===  –í–∏–¥–∞–ª–µ–Ω–Ω—è Load Balancer-—ñ–≤, –Ω–µ –∫–µ—Ä–æ–≤–∞–Ω–∏—Ö Terraform ==="

  # --- ALB/NLB (aws_lb) ---
  ALL_LBS=$(aws elbv2 describe-load-balancers --region "$AWS_REGION" \
    --query "LoadBalancers[?VpcId=='$VPC_ID'].LoadBalancerArn" --output text || echo "")

  TF_LBS=$(terraform -chdir="$TERRAFORM_DIR" state list | grep aws_lb || true)

  TF_LB_ARNS=""
  for lb in $TF_LBS; do
    ARN=$(terraform -chdir="$TERRAFORM_DIR" state show -no-color "$lb" 2>/dev/null | grep "arn =" | awk '{print $3}' || true)
    TF_LB_ARNS+="$ARN"$'\n'
  done

  for LB_ARN in $ALL_LBS; do
    if ! echo "$TF_LB_ARNS" | grep -q "$LB_ARN"; then
      echo "üóë –í–∏–¥–∞–ª—è—î–º–æ ALB/NLB (–Ω–µ Terraform): $LB_ARN"
      aws elbv2 delete-load-balancer --region "$AWS_REGION" --load-balancer-arn "$LB_ARN" || true
    else
      echo "ALB/NLB –∫–µ—Ä—É—î—Ç—å—Å—è Terraform: $LB_ARN"
    fi
  done

  # --- Classic ELB (aws_elb) ---
  echo "=== –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª–∞—Å–∏—á–Ω–∏—Ö Load Balancer-—ñ–≤ (ELB), –Ω–µ –∫–µ—Ä–æ–≤–∞–Ω–∏—Ö Terraform ==="

  CLB_NAMES=$(aws elb describe-load-balancers --region "$AWS_REGION" \
    --query "LoadBalancerDescriptions[?VPCId=='$VPC_ID'].LoadBalancerName" --output text || echo "")

  TF_CLBS=$(terraform -chdir="$TERRAFORM_DIR" state list | grep aws_elb || true)

  TF_CLB_NAMES=""
  for clb in $TF_CLBS; do
    name=$(terraform -chdir="$TERRAFORM_DIR" state show -no-color "$clb" 2>/dev/null | grep "name =" | awk '{print $3}' || true)
    TF_CLB_NAMES+="$name"$'\n'
  done

  for name in $CLB_NAMES; do
    if ! echo "$TF_CLB_NAMES" | grep -q "^$name$"; then
      echo "üóë –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å–∏—á–Ω–∏–π ELB (–Ω–µ Terraform): $name"
      aws elb delete-load-balancer --load-balancer-name "$name" --region "$AWS_REGION" || true
    else
      echo "ELB –∫–µ—Ä—É—î—Ç—å—Å—è Terraform: $name"
    fi
  done

  echo "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è 20 —Å–µ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è Load Balancer-—ñ–≤..."
  sleep 20
}


try_delete_vpc() {
  echo "–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ VPC: $VPC_ID"

  echo "1. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞—Å–æ—Ü—ñ–∞—Ü—ñ–π main route table"
  MAIN_RT_ID=$(aws ec2 describe-route-tables \
    --filters "Name=vpc-id,Values=$VPC_ID" \
    --region "$AWS_REGION" \
    --query "RouteTables[?Associations[?Main==\`true\`]].RouteTableId" \
    --output text)

  if [[ -n "$MAIN_RT_ID" ]]; then
    echo "–í–∏–¥–∞–ª—è—î–º–æ route table: $MAIN_RT_ID"
    aws ec2 delete-route-table --route-table-id "$MAIN_RT_ID" --region "$AWS_REGION" || true
  fi

  echo "2. –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö security groups (–∫—Ä—ñ–º default)"
  SG_IDS=$(aws ec2 describe-security-groups \
    --filters "Name=vpc-id,Values=$VPC_ID" \
    --region "$AWS_REGION" \
    --query "SecurityGroups[?GroupName!='default'].GroupId" \
    --output text)

  for SG_ID in $SG_IDS; do
    echo "–í–∏–¥–∞–ª—è—î–º–æ security group: $SG_ID"
    aws ec2 delete-security-group --group-id "$SG_ID" --region "$AWS_REGION" || true
  done

  echo "3. –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ VPC"
  aws ec2 delete-vpc --vpc-id "$VPC_ID" --region "$AWS_REGION" || {
    echo "VPC —â–µ –º–∞—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ, –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è."
  }
}


clean_blocking_resources() {
  clean_load_balancers
  clean_helm_apps
  clean_kubernetes_namespaces
  clean_argocd_crds
}

cd "$TERRAFORM_DIR"

# [3/6] –û—á–∏—Å—Ç–∫–∞ –æ–± º—î–∫—Ç—ñ–≤ —è–∫—ñ –±–ª–æ–∫—É—é—Ç—å destroy
clean_blocking_resources

echo "[5/6] Terraform destroy: –ø–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞"
if terraform destroy -auto-approve; then
  echo "Terraform destroy —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
else
  echo "Terraform destroy –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é. –ê–Ω–∞–ª—ñ–∑—É—î–º–æ..."
  try_delete_vpc
  echo "[5/6] Terraform destroy: –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞"
  terraform destroy -auto-approve || {
    echo "–ù–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è Terraform destroy –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é."
    exit 1
  }
fi

echo "[6/6] –í–∏–¥–∞–ª–µ–Ω–Ω—è S3 backend"
cd "$S3_BACKEND_DIR"
BUCKET_NAME=$(terraform output -raw bucket_name 2>/dev/null || echo "")

if [[ -n "$BUCKET_NAME" ]]; then
  echo "–û—á–∏—â–µ–Ω–Ω—è –±–∞–∫–µ—Ç—É S3: $BUCKET_NAME"
  aws s3 rm "s3://$BUCKET_NAME" --recursive || true
fi

terraform destroy -auto-approve || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–∏—Ç–∏ backend"

echo "–Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞."
