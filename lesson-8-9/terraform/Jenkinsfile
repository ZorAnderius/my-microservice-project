pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: jenkins-kaniko
spec:
  serviceAccountName: jenkins-sa
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:v1.16.0-debug
      imagePullPolicy: Always
      command:
        - sleep
      args:
        - 99d
    - name: git
      image: alpine/git
      command:
        - sleep
      args:
        - 99d
"""
    }
  }

    environment {
      ECR_REGISTRY = "506421742864.dkr.ecr.eu-central-1.amazonaws.com/lesson-9-chart"
      IMAGE_NAME   = "app"
      IMAGE_TAG    = "v1.0.${BUILD_NUMBER}"

      COMMIT_EMAIL = "jenkins@localhost"
      COMMIT_NAME  = "jenkins"
    }

    stage('Build & Push Docker Image') {
      steps {
        container('kaniko') {
          sh """
            /kaniko/executor \
              --context `pwd`/lesson-8-9/django_app \\
              --dockerfile `pwd`/lesson-8-9/django_app/Dockerfile \\
              --destination= $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG \\
              --cache=true \\
              --insecure \\
              --skip-tls-verify
          """
        }
      }
    }

    stage('Update Chart in Git (optional)') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PAT')]) {
            sh """
              git clone https://$GITHUB_USER:$GITHUB_PAT@github.com/$GITHUB_USER/microservice-project.git -b lesson-8-9
              set -x 
              cd lesson-8-9/charts/django-app

              sed -i "s|repository:.*|repository: ${ECR_REGISTRY}/${IMAGE_NAME}|" values.yaml
              sed -i "s|tag:.*|tag: ${IMAGE_TAG}|" values.yaml

              git config user.email "$COMMIT_EMAIL"
              git config user.name "$COMMIT_NAME"

              git add values.yaml
              git commit -m "Update image tag to ${env.IMAGE_TAG}"
              git push origin main || true
            """
          }
        }
      }
    }

    // Destroy Helm and Terraform (наприклад, по параметру або окремою гілкою)
    stage('Destroy Environment') {
      when {
        expression { return params.DESTROY == true }
      }
      steps {
        container('helm') {
          sh '''
            echo "Uninstalling Helm releases..."
            helm list --short --namespace default | xargs -r -n1 helm uninstall --namespace default || true
          '''
        }
        container('terraform') {
          sh '''
            echo "☠️ Running terraform destroy..."
            terraform init
            terraform destroy -auto-approve
          '''
        }
      }
    }
  }

  parameters {
    booleanParam(name: 'DESTROY', defaultValue: false, description: 'Set to true to destroy all resources')
  }
}
